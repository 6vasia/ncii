#!/usr/bin/env perl

use strict;
use utf8;

use Curses;
use Curses::UI;
use YAML;
use II::Point;
use II::Cache::Storable;
use II::Cache::YAML;
use II::Misc qw(logger logger_facility);
use Env qw/HOME EDITOR/;
use File::Temp qw(tempfile);
use Data::Dumper;

binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
use open ':encoding(utf8)';

my $cui;
my $cfg = {};
my $ii;
my $echoes = {};
my $messages = {};

sub config
{
    my $cfgpath = $HOME ? $HOME . '/.config/ncii' : '.';
    -d $cfgpath or mkdir $cfgpath or die "Couldn't mkdir $cfgpath: $!";
    $cfgpath = '.' if -e './ncii.yaml';
    my $cfgfile = defined $ARGV[0] ? $ARGV[0] : $cfgpath.'/ncii.yaml';
    $cfg = YAML::LoadFile ($cfgfile) if -e $cfgfile;
    if (defined $cfg->{node} and $cfg->{node} =~ m@\Wu/$@) {
        $cfg->{node} =~ s@u/$@@;
    }
}

sub load_cache
{
    my $cachepath = $HOME ? $HOME . '/.config/ncii' : '.';
    $cui->status ("Loading cache") if defined $cui;
    my $cache = II::Cache::Storable->new ($cfg->{node}, $cachepath);
    $echoes = $cache->echoes;
    $messages = $cache->messages;
    $cui->nostatus if defined $cui;
}

sub dump_cache
{
    my $cachepath = $HOME ? $HOME . '/.config/ncii' : '.';
    logger ("info", "Dumping cache");
    $cui->status ("Dumping cache") if defined $cui;
    my $cache = II::Cache::Storable->new ($cfg->{node}, $cachepath);
    if (defined $cache){
        $cache->echoes($echoes);
        $cache->messages($messages);
        $cache->dump;
    }
    $cui->nostatus if defined $cui;
}

sub msg_title ($$)
{
    my ($m, $width) = @_;
    my @lt = localtime($m->{date});
    my $ts = sprintf(" %02d:%02d %02d.%02d.%04d",
            $lt[2], $lt[1], $lt[3], $lt[4], $lt[5]+1900
        );
    my $title = sprintf ("%4d: %s (%s -> %s)",
        $m->{no}, $m->{subj}, $m->{from}, $m->{to});
    my $tlen = length($title);
    $title = '<bold>'.$title.'</bold>' if $m->{unread};
    if ($tlen > $width - length($ts)) {
        return substr ($title, 0, $width - length($ts)).$ts;
    } else {
        return $title." "x($width - length($ts) - $tlen).$ts;
    }
}

sub fetch
{
    local $_;
    my @errors = ();
    
    unless (defined $ii){
        my $authstr = 'guest';
        $authstr = $cfg->{authstr} if (defined $cfg->{authstr} and $cfg->{authstr});
        $ii = II::Point->new ($cfg->{node}, $authstr);
    }
    if (defined $messages->{unsent}) {
        $cui->status ("Pushing messages...");
        my $index = 0;
        for my $m (@{$messages->{unsent}}){
            $ii->post($m);
            @errors = $ii->pop_errors;
            if (@errors) {
                logger ("warn", "Error pushing: %s", $_) for (@errors);
                $cui->error ("Error pushing messages. See log for detail.");
            } else {
                splice @{$messages->{unsent}}, $index;
            }
            $index++;
        }
        $cui->nostatus;
    }
    for my $echo (@{$cfg->{echoes}}) {
        {
            logger ("info", "Fetching %s", $echo);
            $cui->status ("Loading $echo...");
            
            my %msgs = $ii->fetch_echoes($echo);
            @errors = $ii->pop_errors;
            if (@errors){
                logger ("warn", "Error fetching %s: %s", $echo, $_) for (@errors);
                $cui->error("There were errors fetching $echo. See log for details.");
            }
            $echoes->{$echo} = $msgs{$echo};
            logger ("info", "Fetched %s: %d", $echo, scalar @{$msgs{$echo}});
            
            $cui->nostatus;
        }
        
        my @fetchlist = ();
        for my $m (@{$echoes->{$echo}}) {
            push @fetchlist, $m unless defined $messages->{$m};
        }
        if (@fetchlist) {
            logger ("info", "fetching %d messages", scalar @fetchlist);
            $cui->status ("Loading messages for $echo");

            my %fetched = $ii->fetch_msgs(@fetchlist);
            @errors = $ii->pop_errors;
            if (@errors) {
                logger ("warn", "Error fetching: %s", $_) for (@errors);
                $cui->error ("Error fetching messages. See log for detail.");
            }
            for my $msg (keys %fetched){
                $messages->{$msg} = $fetched{$msg};
                $messages->{$msg}{unread} = 1;
            }
            $cui->nostatus;
        }
        my $no = 1;
        for my $m (@{$echoes->{$echo}}){
            $messages->{$m}{no} = $no++;
        }
    }
}

sub load_area ($$)
{
    local $_;
    my ($list, $echo) = @_;
    my $strwidth = $list->canvaswidth;
    
    return unless $echo and $echoes->{$echo};
    logger ("info", "Loading %s", $echo);
    $list->values ([ reverse @{$echoes->{$echo}} ]);
    $list->labels ({ map { $_ => msg_title ($messages->{$_}, $strwidth) } @{$echoes->{$echo}} });
    $list->draw;
}

sub show_unread ($$)
{
    my ($elist, $msglist) = @_;
    my $labels = {};
    for my $e (@{$elist->values()}){
        my $unc = 0;
        for my $m (@{$echoes->{$e}}) {
            $unc++ if ($messages->{$m}{unread});
        }
        $labels->{$e} = $unc ? "$e ($unc)" : $e;
    }
    $elist->labels ($labels);
    $elist->draw;
    $msglist->title ($labels->{$elist->get_active_value()});
    $msglist->intellidraw;
}

sub set_read ($)
{
    my $list = shift;
    my $m = $list->get_active_value();
    $messages->{$m}{unread} = 0;
    $list->labels()->{$m} = msg_title($messages->{$m}, $list->canvaswidth());
    $list->intellidraw;
}

sub fullscreen
{
    my $viewwin = shift;
    $viewwin->focus;
    $viewwin->getobj('content')->focus;
}

sub show_message
{
    my ($viewwin, $area, $m) = @_;
    my $head = $viewwin->getobj('head');
    my $view = $viewwin->getobj('content');
    my $ts = localtime($m->{date});
#    my $ts = sprintf(" %02d:%02d %02d.%02d.%04d",
#            $lt[2], $lt[1], $lt[3], $lt[4], $lt[5]+1900
#        );
    $head->title(sprintf ("%s: %s of %s", $area, $m->{no}, scalar @{$echoes->{$area}}));
    $head->getobj('date')->text($ts);
    $head->getobj('from')->text($m->{from});
    $head->getobj('to')->text($m->{to});
    $head->getobj('subj')->text($m->{subj});
    $view->text($m->{content});
}

sub resubj ($)
{
    local $_ = shift;
    if (m/^re\s?(\((\d+)\))?:/i) {
        my $ct = $2 ?  $2 + 1 : 2;
        s/^(re)\s?(\((\d+)\))?:/$1 \($ct\):/i;
    } else {
        $_ = 'Re: '.$_;
    }
    return $_;
}

sub quote ($)
{
    local $_ = shift;
    s/\n(.)/\n>$1/g;
    return '>'.$_;
}

sub abandon_mesg
{
    $cui->delete ('new_mesg');
    $cui->draw;
}

sub send_mesg
{
    my ($area, $repto) = @_;
    my $newwin = $cui->getobj('new_mesg');
    my $m = {
        echoarea => $area,
        to => $newwin->getobj('to')->text(),
        subj => $newwin->getobj('subj')->text(),
        content => $newwin->getobj('content')->text(),
        repto => $repto
    };
    $m->{content}.="\n" unless ($m->{content} =~ /\n$/);
    $messages->{unsent} = [] unless defined $messages->{unsent};
    push @{$messages->{unsent}}, $m;
    $cui->delete ('new_mesg');
    $cui->draw;
    $cui->dialog ("Message is held and will be pushed upon next fetch");
}

sub new_mesg
{
    my ($area, $repto) = @_;
    my $newwin = $cui->add (
        'new_mesg', 'Window',
        -border => 1,
        -title => "Write to $area",
        -centered => 1,
        -width => int($cui->{-width}*3/4),
        -height => int($cui->{-height}*3/4),
    );
    $newwin->add (
        'tol', 'Label',
        -y => 0, -widht => 5,
        -text => 'To:  ',
        -bold => 1
    );
    $newwin->add (
        'to', 'TextEntry',
        -y => 0, -x => 6,
        -sbborder => 1,
        -text => defined $repto ? $messages->{$repto}{from} : 'All'
    );
    $newwin->add (
        'subjl', 'Label',
        -y => 1, -widht => 5,
        -text => 'Subj:',
        -bold => 1
    );
    $newwin->add (
        'subj', 'TextEntry',
        -y => 1, -x => 6,
        -sbborder => 1,
        -text => defined $repto ? resubj ($messages->{$repto}{subj}) : ''
    );
    my $preview = $newwin->add (
        'content', 'TextViewer',
        -y => 2, -height => $newwin->canvasheight() - 3,
        -border => 1,
        -text => defined $repto ? quote($messages->{$repto}{content}) : '',
        -wrapping => 1,
        -vscrollbar => 'right',
    );
    $preview->set_binding (sub {
            my ($th, $tempfile) = tempfile( );
            unless ($th) {
                $cui->error ("Failed opening file: $!");
                return;
            }
            my $ed = $cfg->{editor};
            $ed = $EDITOR unless defined $ed;
            if (defined $ed){
                print $th $preview->text();
                close $th;
                $cui->leave_curses;
                system ("$ed $tempfile");
                $cui->reset_curses;
                local $/=undef;
                open $th, "<", $tempfile;
                $preview->text(<$th>);
                close $th;
                $preview->draw;
            } else {
                $cui->error ("Editor not defined. Use config or EDITOR variable");
            }
        }, KEY_ENTER()
    );
    $newwin->add (
        'buttons', 'Buttonbox',
        -y => -1,
        -buttons => [
            {
                -label => '< Abandon >',
                -value => 'fuck',
                -shortcut => "\cQ",
                -onpress => \&abandon_mesg
            },
            {
                -label => '< Send >',
                -value => 'send',
                -shortcut => "\cS",
                -onpress => sub {send_mesg($area, $repto)}
            },
        ]
    );
    $newwin->set_binding (\&abandon_mesg, "\cQ");
    $newwin->set_binding (sub {send_mesg($area, $repto)}, "\cS");
    
    $newwin->focus;
}

sub ui
{
    my $echowidth = defined $cfg->{ui}{echolist_width} ? $cfg->{ui}{echolist_width} : 20;
    my $mainwin = $cui->add (
        'mainwin', 'Window',
        -border => 0,
    );
    my $echowin = $mainwin->add (
        'echowin', 'Window',
        -border => 1,
        -width => $echowidth
    );
    my $echolist = $echowin->add (
        'echolist', 'Listbox',
        -border => 0,
        -values => $cfg->{echoes},
    );
    my $msgwin = $mainwin->add (
        'msgwin', 'Window', 
        -border => 0,
        -x => $echowidth,
    );
    my $msglist = $msgwin->add (
        'msglist', 'Listbox',
        -border => 1,
        -height => $msgwin->canvasheight()/2,
        -vscrollbar => 'right',
        -htmltext => 1
    );
    my $preview = $msgwin->add (
        'prewiew', 'TextViewer', 
        -border => 1,
        -wrapping => 1,
        -y => int($msgwin->canvasheight()/2),
        -vscrollbar => 'right',
    );
    my $viewwin = $cui->add (
        'viewwin', 'Window',
        -border => 0,
    );
    my $vwhead = $viewwin->add (
        'head', 'Window',
        -border => 1,
        -title => 'Area %s | Message %d of %d',
        -y => 0,
        -height => 6
    );
    my $hlen = 6;
    $vwhead->add (
        'datel', 'Label',
        -text => 'Date:',
        -bold => 1,
        -y => 0,
        -width => $hlen,
    );
    $vwhead->add (
        'date', 'Label',
        -y => 0,
        -x => $hlen,
    );
    $vwhead->add (
        'froml', 'Label',
        -text => 'From:',
        -bold => 1,
        -y => 1,
        -width => $hlen,
    );
    $vwhead->add (
        'from', 'Label',
        -y => 1,
        -x => $hlen,
    );
    $vwhead->add (
        'tol', 'Label',
        -text => 'To  :',
        -bold => 1,
        -y => 2,
        -width => $hlen,
    );
    $vwhead->add (
        'to', 'Label',
        -y => 2,
        -x => $hlen,
    );
    $vwhead->add (
        'subjl', 'Label',
        -text => 'Subj:',
        -bold => 1,
        -y => 3,
        -width => $hlen,
    );
    $vwhead->add (
        'subj', 'Label',
        -y => 3,
        -x => $hlen,
    );
    
    my $vwbody = $viewwin->add (
        'content', 'TextViewer',
        -y => $vwhead->height(),
        -text => 'test',
        -wrapping => 1,
        -border => 1,
        -vscrollbar => 'right',
    );
    $vwbody->set_routine ('loose-focus', 'RETURN');

    $mainwin->set_binding( sub {dump_cache; $cui->mainloopExit;} , "\cQ");
    $mainwin->set_binding( sub {
            $echowin->{-width} += 1;
            $echowin->layout;
            $msgwin->{-x} += 1;
            $msgwin->layout;
            $echowin->draw;
            $mainwin->intellidraw;
        } , "\cL");
    $mainwin->set_binding( sub {
            $echowin->{-width} -= 1;
            $echowin->layout;
            $msgwin->{-x} -= 1;
            $msgwin->layout;
            $echowin->draw;
            $mainwin->intellidraw;
        } , "\cK");
    $mainwin->set_binding(sub {
            $echolist->option_next;
            $echolist->option_select;
            $echolist->draw},
        "\cN");
    $mainwin->set_binding(sub {
            $echolist->option_prev;
            $echolist->option_select;
            $echolist->draw},
        "\cP");
    
    $echolist->onChange(sub {
            show_unread($echolist, $msglist);
            load_area($msglist, $echolist->get_active_value());
        });
    $msglist->onSelectionChange(sub {
            $msglist->option_select;
            if ($msglist->get_active_value() and defined $messages->{$msglist->get_active_value()}){
                my $m = $messages->{$msglist->get_active_value()};
                $preview->text($m->{content});
                if ($m->{unread}) {
                    set_read($msglist);
                    show_unread($echolist, $msglist);
                }
                show_message($viewwin, $echolist->get_active_value(), $m);
            }
        });
        
    $mainwin->set_binding(sub {
            fetch();
            show_unread($echolist, $msglist);
            load_area ($msglist, $echolist->get_active_value());
        }, "\cF");
    $mainwin->set_binding (sub {new_mesg($echolist->get_active_value())}, "n");
    $mainwin->set_binding (sub {
            new_mesg( $echolist->get_active_value(),
                    $msglist->get_active_value());
        }, "r");

    $viewwin->set_binding (sub {$mainwin->focus}, "\cQ");
    $viewwin->set_binding (sub {
            $msglist->option_next;
            my $m = $messages->{$msglist->get_active_value()};
            show_message($viewwin, $echolist->get_active_value(), $m);
            $viewwin->intellidraw;
        }, KEY_RIGHT());
    $viewwin->set_binding (sub {
            $msglist->option_prev;
            my $m = $messages->{$msglist->get_active_value()};
            show_message($viewwin, $echolist->get_active_value(), $m);
            $viewwin->intellidraw;
        }, KEY_LEFT());
    $msglist->set_binding (sub {fullscreen($viewwin)}, KEY_ENTER());

    $echolist->set_selection(0);
    show_unread($echolist, $msglist);
    $msgwin->focus;
}

sub options_ui
{
    $cui->error("Config me first!");
    exit;
}

logger_facility "ncii";
logger ("info", "=== Starting at %s ===", scalar localtime);

config;
$cui = new Curses::UI ( 
    -clear_on_exit => 1, 
    -mouse_support => 1,
    -color_support => 1,
    -debug => 0,
    -utf8 => 1
);

if (not defined $cfg->{node}) {
    options_ui;
}

load_cache;
ui;

$cui->mainloop;
